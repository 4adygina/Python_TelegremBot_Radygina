# Отрисовывает игровое поле
def draw_board(board, Fore, Back, Style):

    # запустить цикл, который проходит по всем 3 строкам доски
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = Back.GREEN + ' ' + Style.RESET_ALL
            elif board[i][j] == 'X':
                board[i][j] = Fore.RED + 'X' + Style.RESET_ALL
            elif board[i][j] == 'O':
                board[i][j] = Fore.BLUE + 'O' + Style.RESET_ALL
        # поставить разделители значений в строке
        print(" | ".join(board[i]))
        # поставить разделители строк
        print("---------")


# Запрашивает координаты ячейки
def ask_move(player, board):
    # Считаем, что пользователь не учитывает, что в Python отсчет с 0
    line = int(input('В какую из трех строк вы хотите поставить знак? '))
    column = int(input('В какой из трех столбцов вы хотите поставить знак? '))
    return (line, column)


#Ставит в ячейку значок игрока
def make_move(player, board, line, column, Fore, Back, Style):
    # проверка на свободную ячейку
    if board[line-1][column-1] != Back.GREEN + ' ' + Style.RESET_ALL:
        print('Ячейка занята. Повторите попытку')
        ask_move(player, board)
    board[line-1] [column-1] = player
    return True


# Объединяет все функции, отвечающие за постановку ячейки на игровое поле
def ask_and_make_move(board, player, Fore, Back, Style):
    line, column = ask_move(player, board)
    make_move(player, board, line, column, Fore, Back, Style)
    draw_board(board, Fore, Back, Style)


# Проверяет не наступил ли выигрыш
def check_win(player, board):
    # Проверка на наличие в одной строке/столбце одинаковых значков
    for i in range(3):
        if board [0][i] == board [1][i] == board [2][i] == player:
            return True
        if board [i] == [player, player, player]:
            return True
    #Проверка диагоналей на одинаковые значков
    if board [0][0] == board [1][1] == board [2][2] == player:
        return True
    if board [0][2] == board [1][1] == board [2][0] == player:
        return True
    return False


# Основная функция, объединяющая/вызывающая все ранее заданные функции
def tic_tac_toe():
    from colorama import Fore, Back, Style
    # Задаем бесконечный цикл
    while True:
        # Спрашиваем, какой игрок начинает игру и отрисовываем поле
        player = str(input('Какой вы игрок? '))
        board = [[' ' for i in range(3)] for j in range(3)]
        draw_board(board, Fore, Back, Style)

        # Запускаем игру, начиная проставлять значки по полю
        while True:
            ask_and_make_move(board, player, Fore, Back, Style)

            if check_win(player, board):
                print(f'Игрок {player} выиграл')
                break

        # Проверяем ни заполнено ли все поле без победы
            tie_game = False
            for row in board:
                for cell in row:
                    if cell == Back.GREEN + ' ' + Style.RESET_ALL:
                        tie_game = True

            if not tie_game:
                break

            # Смена игрока
            player = 'O' if player == 'X' else 'X'

        # При необходимости запуск новой игры
        restart = input("Хотите сыграть еще раз? (y/n) ")
        if restart.lower() != "y":
            break
